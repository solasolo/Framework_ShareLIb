#pragma once

#include "BaseException.h"

#include <windows.h>

using namespace GLEO;

const HRESULT OPC_E_INVALIDHANDLE = 0xC0040001L;
const HRESULT OPC_E_BADTYPE = 0xC0040004L;
const HRESULT OPC_E_PUBLIC = 0xC0040005L;
const HRESULT OPC_E_BADRIGHTS = 0xC0040006L;
const HRESULT OPC_E_UNKNOWNITEMID = 0xC0040007L;
const HRESULT OPC_E_INVALIDITEMID = 0xC0040008L;
const HRESULT OPC_E_INVALIDFILTER = 0xC0040009L;
const HRESULT OPC_E_UNKNOWNPATH = 0xC004000AL;
const HRESULT OPC_E_RANGE = 0xC004000BL;
const HRESULT OPC_E_DUPLICATENAME = 0xC004000CL;
const HRESULT OPC_S_UNSUPPORTEDRATE = 0x0004000DL;
const HRESULT OPC_S_CLAMP = 0x0004000EL;
const HRESULT OPC_S_INUSE = 0x0004000FL;
const HRESULT OPC_E_INVALIDCONFIGFILE = 0xC0040010L;
const HRESULT OPC_E_NOTFOUND = 0xC0040011L;
const HRESULT OPC_E_INVALID_PID = 0xC0040203L;
const HRESULT OPC_E_DEADBANDNOTSET = 0xC0040400L;
const HRESULT OPC_E_DEADBANDNOTSUPPORTED = 0xC0040401L;
const HRESULT OPC_E_NOBUFFERING = 0xC0040402L;
const HRESULT OPC_E_INVALIDCONTINUATIONPOINT = 0xC0040403L;
const HRESULT OPC_S_DATAQUEUEOVERFLOW = 0x00040404L;
const HRESULT OPC_E_RATENOTSET = 0xC0040405L;
const HRESULT OPC_E_NOTSUPPORTED = 0xC0040406L;


class OPCException : public GLEO::Exception
{
	struct MassageMap
	{
		HRESULT Code;
		const char* Message;
	};

private:
	static MassageMap MessageDict[];

public:
	static void Check(HRESULT hr, string place) throw(OPCException);

	OPCException(string msg, string place, int code = -1);


};